import asyncio
import json
import logging
import random
import sys
import time
import mongo
import datetime
import IdisApi

import dotenv
from aiogram import Bot, Dispatcher,F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, FSInputFile, ReplyKeyboardRemove
from keyboards import keyboard
from aiogram.client.bot import DefaultBotProperties
from aiogram.utils.markdown import hbold
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

__api_token = dotenv.get_key(".env",key_to_get="TOKEN")

dp = Dispatcher()
bot = Bot(__api_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
cll = mongo.get_client()
notification = cll.Telegram.Notifications
users = cll.Telegram.Auths
attendance = cll.Telegram.Attendance

OWNER_ID = 5482163475
CHANNEL_ID = -1002302401336

def find_lesson(name:str, data:list) -> dict:
    for item in data:
        if item["name"] == name:
            return item
    return None

class AuthUser(StatesGroup):
    FullName = State()

class AttachReason(StatesGroup):
    reason = State()

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    if message.from_user.id != message.chat.id:
        return await message.answer("–ü—Ä–∏–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!\n\nüí† –ö–æ–º–∞–Ω–¥—ã:\n/start - –í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n/ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞.\n/checkin - –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ.\n/today - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n/tomorrow - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.",reply_markup=ReplyKeyboardRemove())
    if users.count_documents({"user":message.from_user.id}) == 0:
        return await message.answer("üí¢ –¢–µ–±–µ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ :)", reply_markup=keyboard.auth)
    await message.answer("–ü—Ä–∏–≤–µ—Ç!\n–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–æ—á–∫—É!üí´\n\nüí† –ö–æ–º–∞–Ω–¥—ã:\n/start - –í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n/ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞.\n/checkin - –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ.\n/today - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n/tomorrow - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.",reply_markup=keyboard.main)

@dp.message(F.text == '–ü—Ä–∏–≤–µ—Ç')
async def hello(message:Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç –¥–æ—Ä–æ–≥–æ–π! üå∫")

@dp.message(F.text == '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ –≤—Å–µ–º')
async def happyday(message:Message):
    await message.reply("–î–æ–±—Ä–æ–µ! ‚òÄÔ∏è")

@dp.message(F.text == '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è')
async def auth_bot(message:Message, state:FSMContext):
    if message.from_user.id != message.chat.id:
        return await message.answer("–ü—Ä–∏–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!\n\nüí† –ö–æ–º–∞–Ω–¥—ã:\n/start - –í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n/ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞.\n/checkin - –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ.\n/today - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n/tomorrow - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.",reply_markup=ReplyKeyboardRemove())
    if users.count_documents({"user":message.from_user.id}) == 1:
        return await message.reply("‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
    try:
        member = await bot.get_chat_member(CHANNEL_ID, message.from_user.id)
        if not member.status in ['member', 'administrator', 'creator']: return await message.reply("üí¢ –û—à–∏–±–∫–∞, –≤—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥—Ä—É–ø–ø–µ —Å –æ–¥–Ω–æ–≥—Ä—É–ø–ø–Ω–∏–∫–∞–º–∏.")
        await message.reply("üí† –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è –∫—É—Ä–∞—Ç–æ—Ä–æ–º.\n–ü—Ä–∏–º–µ—Ä: –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ",reply_markup=ReplyKeyboardRemove())
        await state.set_state(AuthUser.FullName)
    except Exception as e:
        await message.reply("üí¢ –û—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.")

@dp.message(AuthUser.FullName)
async def auth_userName(message:Message,state:FSMContext):
    await state.update_data(FullName=message.text)
    data = await state.get_data()
    await state.clear()
    if users.count_documents({"user":message.from_user.id}) == 0:
        users.insert_one({"user":message.from_user.id,"tag": message.from_user.username, "fullname": data['FullName'],'lvl':1})
    await message.reply(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.\n‚òÄÔ∏è–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ <b>{data['FullName']}</b>!",reply_markup=keyboard.main)

@dp.message(F.text == 'üßë‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏')
async def teachers(message:Message):
    if message.from_user.id != message.chat.id:
        return await message.answer("–ü—Ä–∏–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!\n\nüí† –ö–æ–º–∞–Ω–¥—ã:\n/start - –í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n/ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞.\n/checkin - –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ.\n/today - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n/tomorrow - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.",reply_markup=ReplyKeyboardRemove())
    if users.count_documents({"user":message.from_user.id}) == 0:
        return await message.answer("üí¢ –¢–µ–±–µ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –º–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é –∏ –Ω–∞–∂–º–∏—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ <b>–ù–∞—á–∞—Ç—å</b> –∏–ª–∏ /start")
    await message.reply("üí¢ –í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",reply_markup=keyboard.teachers)

@dp.message(F.text.in_([
    "–ë–ò–û–õ–û–ì–ò–Ø", "–•–ò–ú–ò–Ø", "–í–í–ï–î–ï–ù–ò–ï –í –ü–†–û–§–ï–°–°–ò–Æ", "–ì–ï–û–ì–†–ê–§–ò–Ø", 
    "–ò–ù–û–°–¢–†–ê–ù–ù–´–ô –Ø–ó–´–ö", "–ò–ù–§–û–†–ú–ê–¢–ò–ö–ê", "–ò–°–¢–û–†–ò–Ø", "–õ–ò–¢–ï–†–ê–¢–£–†–ê", 
    "–ú–ê–¢–ï–ú–ê–¢–ò–ö–ê", "–û–ë–©–ï–°–¢–í–û–ó–ù–ê–ù–ò–ï", "–†–û–î–ù–ê–Ø –õ–ò–¢–ï–†–ê–¢–£–†–ê", 
    "–†–£–°–°–ö–ò–ô –Ø–ó–´–ö", "–§–ò–ó–ò–ö–ê", "–§–ò–ó–ò–ß–ï–°–ö–ê–Ø –ö–£–õ–¨–¢–£–†–ê", 
    "–í–í–ï–î–ï–ù–ò–ï –í –ü–†–û–ï–ö–¢–ù–£–Æ –î–ï–Ø–¢–ï–õ–¨–ù–û–°–¢–¨", "–û–°–ù–û–í–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ò –ó–ê–©–ò–¢–´ –†–û–î–ò–ù–´", 
    "üîô –û–±—Ä–∞—Ç–Ω–æ"
]))
async def handle_teacher_selection(message: Message):
    if message.text == "üîô –û–±—Ä–∞—Ç–Ω–æ":
        if message.from_user.id != message.chat.id:
            return await message.answer("–ü—Ä–∏–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!\n\nüí† –ö–æ–º–∞–Ω–¥—ã:\n/start - –í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n/ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞.\n/checkin - –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ.\n/today - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n/tomorrow - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.",reply_markup=ReplyKeyboardRemove())
        if users.count_documents({"user":message.from_user.id}) == 0:
            return await message.answer("üí¢ –¢–µ–±–µ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ!",reply_markup=keyboard.auth)
        await message.reply("–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–æ—á–∫—É!üí´", reply_markup=keyboard.main)
    else:
        try:
            teachers_array = IdisApi.get_last_teachers()
            info = find_lesson(message.text,teachers_array['teachers'])
            text = f"üìï –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {hbold(info['name'])}\n\n"
            for a in info["lessons"]:
                text += f"‚Ä¢ {a['title']} <a href='{a['href']}'>{a['teacher']}</a>\n\n"
            current_time = datetime.datetime.now()
            last_update = datetime.datetime.strptime(teachers_array['last'], "%d/%m/%Y, %H:%M:%S")
            time_difference = current_time - last_update
            minutes_ago = time_difference.total_seconds() // 60
            if minutes_ago < 1: output = "–ú–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥."
            elif minutes_ago == 1: output = "1 –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥."
            else: output = f"{int(minutes_ago)} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥."
            text += f"‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ: {hbold(output)}"
            await message.reply(text) # üìÑ
        except Exception as err:
            await bot.send_message(OWNER_ID,f"üí¢ –û—à–∏–±–∫–∞!\n{err}")
            await message.reply("üí¢ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –£–∂–µ –ø–µ—Ä–µ–¥–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@dp.message(F.text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
async def teachers(message:Message):
    if message.from_user.id != message.chat.id:
        return await message.answer("–ü—Ä–∏–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!\n\nüí† –ö–æ–º–∞–Ω–¥—ã:\n/start - –í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n/ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞.\n/checkin - –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ.\n/today - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n/tomorrow - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.",reply_markup=ReplyKeyboardRemove())
    if users.count_documents({"user":message.from_user.id}) == 0:
        return await message.answer("üí¢ –¢–µ–±–µ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –º–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é –∏ –Ω–∞–∂–º–∏—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ <b>–ù–∞—á–∞—Ç—å</b> –∏–ª–∏ /start")
    await message.reply("‚åõ –í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—É—é –¥–∞—Ç—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",reply_markup=keyboard.schedule)

async def get_schedule(last_message: Message,date1:str,date2:str):
    schedule_array = IdisApi.get_last_schedule(date1,date2)
    if not schedule_array[0]:
        await last_message.edit_text(f"‚åõ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –ø–∞—Ä...\n–ó–∞–π–º–µ—Ç –Ω–µ –±–æ–ª–µ–µ –º–∏–Ω—É—Ç—ã..")
        response = IdisApi.update_all()
        await bot.send_message(OWNER_ID,f"üí´ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!\n\n‚ùì–°—Ç–∞—Ç—É—Å: {response[0]}\n‚åõ –ü—Ä–æ—Ü–µ—Å—Å—ã:\n<pre><code class='language-json'>{json.dumps(response[1], indent=4, ensure_ascii=False)}</code></pre>")
        if not response[0]:
            await bot.send_message(OWNER_ID,f"üí¢ –û—à–∏–±–∫–∞!\n{response[1]}")
            await last_message.edit_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return None
        schedule_array = IdisApi.get_last_schedule(date1,date2)
    text = ""
    if date1 == date2: text = f"üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä –Ω–∞ {hbold(date1)}\n\n"
    else: text = f"üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä —Å {hbold(date1)} –ø–æ {hbold(date2)}\n\n"
    number = 0
    for lesson in schedule_array[1]:
        if lesson['name'] == "–ù–µ—Ç—É –ø–∞—Ä":
            text += f"‚òÄÔ∏è –°–æ–ª–Ω—ã—à–Ω–æ, –Ω–∞ {hbold(lesson['date']['date'])} –Ω–µ—Ç—É –ø–∞—Ä! –†–∞–¥—É–π—Å—è)\n\n"
            break
        number+=1
        link_comment = ""
        if lesson['comment'][:8] in ["https://", "http://"]:
            link_comment = f"<a href='{lesson['comment']}'>–°—Å—ã–ª–∫–∞ –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</a>"
        else:
            link_comment = lesson['comment']
        text += f"‚òÄÔ∏è –î–∞—Ç–∞: {hbold(lesson['date']['week'])} - {hbold(lesson['date']['date'])}\nüîó {hbold(lesson['time'])} - {lesson['name']}\nüèôÔ∏è –ê–¥—Ä–µ—Å: {hbold(lesson['place']['address'])}\nüö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {hbold(lesson['place']['audience'])}\nüí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π: {link_comment}\nüßë‚Äçüè´ –ì—Ä—É–ø–ø—ã/–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {hbold(lesson['teacher'])}\n\n"
    last_update = datetime.datetime.strptime(schedule_array[2], "%d/%m/%Y, %H:%M:%S")
    today = datetime.datetime.now()
    time_difference = today - last_update
    minutes_ago = time_difference.total_seconds() // 60
    if minutes_ago < 1: output = "–ú–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥."
    elif minutes_ago == 1: output = "1 –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥."
    else: output = f"{int(minutes_ago)} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥."
    text += f"üìÑ –í—Å–µ–≥–æ: <b>{number} –ø–∞—Ä(–∞/—ã)</b>\n"
    text += f"‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ: <b>{output}</b>"
    return text

@dp.message(F.text.in_(["üïõ –°–µ–≥–æ–¥–Ω—è","üïê –ó–∞–≤—Ç—Ä–∞","üìÑ –í—Å—è —Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è"]))
async def handle_schedule_selection(message: Message):
    if message.from_user.id != message.chat.id:
        return await message.answer("–ü—Ä–∏–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!\n\nüí† –ö–æ–º–∞–Ω–¥—ã:\n/start - –í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n/ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞.\n/checkin - –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ.\n/today - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n/tomorrow - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.",reply_markup=ReplyKeyboardRemove())
    if users.count_documents({"user":message.from_user.id}) == 0:
        return await message.answer("üí¢ –¢–µ–±–µ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –º–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é –∏ –Ω–∞–∂–º–∏—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ <b>–ù–∞—á–∞—Ç—å</b> –∏–ª–∏ /start")
    last_message = await message.reply("‚åõ –û–±—Ä–∞–±–æ—Ç–∫–∞...")
    today = datetime.datetime.now()
    if message.text == "üïõ –°–µ–≥–æ–¥–Ω—è":
        date1 = date2 = today.strftime("%d.%m.%Y")
    elif message.text == "üïê –ó–∞–≤—Ç—Ä–∞":
        tomorrow = today + datetime.timedelta(days=1)
        date1 = date2 = tomorrow.strftime("%d.%m.%Y")
    elif message.text == "üìÑ –í—Å—è —Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è":
        start_of_week = today - datetime.timedelta(days=today.weekday())
        end_of_week = start_of_week + datetime.timedelta(days=6)
        date1 = start_of_week.strftime("%d.%m.%Y")
        date2 = end_of_week.strftime("%d.%m.%Y")
    response = await get_schedule(last_message,date1,date2)
    if response == None: return
    await last_message.edit_text(text=response)

@dp.message(F.text.in_(["‚ûï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"]))
async def handle_notification(message: Message):
    if message.from_user.id != message.chat.id:
        return await message.answer("–ü—Ä–∏–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!\n\nüí† –ö–æ–º–∞–Ω–¥—ã:\n/start - –í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n/ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞.\n/checkin - –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ.\n/today - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n/tomorrow - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.",reply_markup=ReplyKeyboardRemove())
    if users.count_documents({"user":message.from_user.id}) == 0:
        return await message.answer("üí¢ –¢–µ–±–µ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –º–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é –∏ –Ω–∞–∂–º–∏—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ <b>–ù–∞—á–∞—Ç—å</b> –∏–ª–∏ /start")
    if notification.count_documents({"user":message.from_user.id}) == 0:
        notification.insert_one({"user":message.from_user.id, "isOn": False, "type": 0,"onSend": datetime.datetime.now().strftime("%d.%m.%Y")})
    mass = notification.find_one({"user":message.from_user.id})
    if mass['isOn']: status = "–í–∫–ª—é—á–µ–Ω—ã"
    else: status = "–û—Ç–∫–ª—é—á–µ–Ω—ã"
    text = f"‚ùî –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: <b>{status}</b>"
    if mass['type'] == 1: clock = "30 –º–∏–Ω—É—Ç"
    elif mass['type'] == 2: clock = "1 —á–∞—Å"
    elif mass['type'] == 3: clock = "1.5 —á–∞—Å–∞"
    else: clock = "2 —á–∞—Å–∞"
    if mass['isOn']:
        text += f"\n\nüïë –í–∞—Å —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –ø–∞—Ä–µ –∑–∞ <b>{clock}</b>!"
    else:
        text += f"\n\nüí¢ –í—ã–±–µ—Ä–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ —Å–∫–æ–ª—å–∫–æ –¥–æ –ø–∞—Ä—ã –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å!"
    await message.reply(text,reply_markup=keyboard.notification)

@dp.message(F.text.in_(["üïõ –ó–∞ 30 –º–∏–Ω—É—Ç", "üïê –ó–∞ 1 —á–∞—Å", "üïë –ó–∞ 1.5 —á–∞—Å–∞","üïí –ó–∞ 2 —á–∞—Å–∞", "‚õî –í—ã–∫–ª—é—á–∏—Ç—å"]))
async def handle_notification_selection(message: Message):
    if message.from_user.id != message.chat.id:
        return await message.answer("–ü—Ä–∏–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!\n\nüí† –ö–æ–º–∞–Ω–¥—ã:\n/start - –í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n/ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞.\n/checkin - –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ.\n/today - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n/tomorrow - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.",reply_markup=ReplyKeyboardRemove())
    if users.count_documents({"user":message.from_user.id}) == 0:
        return await message.answer("üí¢ –¢–µ–±–µ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –º–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é –∏ –Ω–∞–∂–º–∏—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ <b>–ù–∞—á–∞—Ç—å</b> –∏–ª–∏ /start")
    if message.text == "‚õî –í—ã–∫–ª—é—á–∏—Ç—å":
        notification.update_one({"user":message.from_user.id},{"$set": {"isOn": False}})
        await message.reply("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
        return
    elif message.text == "üïõ –ó–∞ 30 –º–∏–Ω—É—Ç": datetype = 1; clock = "30 –º–∏–Ω—É—Ç"
    elif message.text == "üïê –ó–∞ 1 —á–∞—Å": datetype = 2; clock = "1 —á–∞—Å"
    elif message.text == "üïë –ó–∞ 1.5 —á–∞—Å–∞": datetype = 3; clock = "1.5 —á–∞—Å–∞"
    elif message.text == "üïí –ó–∞ 2 —á–∞—Å–∞": datetype = 4; clock = "2 —á–∞—Å–∞"
    notification.update_one({"user":message.from_user.id},{"$set": {"isOn": True, "type": datetype}})
    await message.reply(f"‚úÖ –¢–µ–ø–µ—Ä—å –≤–∞—Å –±—É–¥–µ—Ç –æ–ø–æ–≤–µ—â–∞—Ç—å –∑–∞ <b>{clock}</b> –¥–æ –ø–∞—Ä—ã!")

@dp.message(F.text == 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
async def handle_update_info(message:Message):
    if message.from_user.id != message.chat.id:
        return await message.answer("–ü—Ä–∏–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!\n\nüí† –ö–æ–º–∞–Ω–¥—ã:\n/start - –í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n/ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞.\n/checkin - –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ.\n/today - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n/tomorrow - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.",reply_markup=ReplyKeyboardRemove())
    if users.count_documents({"user":message.from_user.id}) == 0:
        return await message.answer("üí¢ –¢–µ–±–µ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –º–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é –∏ –Ω–∞–∂–º–∏—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ <b>–ù–∞—á–∞—Ç—å</b> –∏–ª–∏ /start")
    if message.from_user.id == OWNER_ID:
        response = IdisApi.update_all()
        await message.reply(f"üí´ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!\n\n‚ùì–°—Ç–∞—Ç—É—Å: {response[0]}\n‚åõ –ü—Ä–æ—Ü–µ—Å—Å—ã:\n<pre><code class='language-json'>{json.dumps(response[1], indent=4, ensure_ascii=False)}</code></pre>")
        return
    teachers_array = IdisApi.get_last_teachers()
    current_time = datetime.datetime.now()
    last_update = datetime.datetime.strptime(teachers_array['last'], "%d/%m/%Y, %H:%M:%S")
    time_difference = current_time - last_update
    minutes_ago = time_difference.total_seconds() // 60
    if minutes_ago < 60:
        return await message.reply(f"üí¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞—è, –æ–Ω–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ <b>{minutes_ago} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥.</b>")
    await bot.send_message(OWNER_ID,f"‚ùî –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!\n‚åõ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ <b>{minutes_ago} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥.</b>.", reply_markup=keyboard.update)
    await message.reply("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n–ñ–¥—ë–º –∫–æ–≥–¥–∞ –¢—É—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

@dp.callback_query(F.data == 'update yes')
async def __update_callback(callback:CallbackQuery):
    await callback.answer("üîÑÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
    response = IdisApi.update_all()
    await bot.send_message(OWNER_ID,f"üí´ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!\n\n‚ùì–°—Ç–∞—Ç—É—Å: {response[0]}\n‚åõ –ü—Ä–æ—Ü–µ—Å—Å—ã:\n<pre><code class='language-json'>{json.dumps(response[1], indent=4, ensure_ascii=False)}</code></pre>")

@dp.callback_query(F.data == 'update no')
async def __updateNo_callback(callback:CallbackQuery):
    await callback.answer("‚õî –û—Ç–º–µ–Ω–∞..")
    await callback.message.delete()

@dp.message(F.text == "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å—Å—è")
async def handle_attach(message:Message):
    if message.from_user.id != message.chat.id:
        return await message.answer("–ü—Ä–∏–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!\n\nüí† –ö–æ–º–∞–Ω–¥—ã:\n/start - –í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n/ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞.\n/checkin - –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ.\n/today - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n/tomorrow - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.",reply_markup=ReplyKeyboardRemove())
    if users.count_documents({"user":message.from_user.id}) == 0:
        return await message.answer("üí¢ –¢–µ–±–µ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –º–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é –∏ –Ω–∞–∂–º–∏—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ <b>–ù–∞—á–∞—Ç—å</b> –∏–ª–∏ /start")
    await message.answer("‚òÄÔ∏è –¢—ã –æ—Ç–º–µ—á–∞–µ—à—å—Å—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\nüî¥ –î–∞–≤–∞–π—Ç–µ –Ω–µ –±—É–¥–µ–º –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å –Ω–∞—à–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ —Å—Ç–∞—Ä–æ—Å—Ç—É, –ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–¥—É.\nüòà –í–∞—Å –≤—Å–µ —Ä–∞–≤–Ω–æ –≤–∞—Å –Ω–∞–π–¥–µ—Ç —Å—Ç–∞—Ä–æ—Å—Ç–∞, –µ—Å–ª–∏ –Ω–µ —Å—Ç–∞—Ä–æ—Å—Ç–∞ —Ç–æ - –∫—É—Ä–∞—Ç–æ—Ä.",reply_markup=keyboard.attach)

def add_attach(userid:int, date:str, reason: str) -> bool:
    count = attendance.count_documents({"user":userid,"date":date})
    if count >= 1:
        attendance.update_one({"user":userid,"date":date},{"$set":{"reason":reason}})
        return True
    else:
        attendance.insert_one({"user":userid,"date":date,"reason":reason})
        return False

@dp.message(F.text.in_(["üí¢ –ú–µ–Ω—è –Ω–µ –±—É–¥–µ—Ç", "‚úÖ –Ø –ø—Ä–∏—à–µ–ª", "üí† –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"]))
async def handle_attach_vote(message:Message, state:FSMContext):
    if message.from_user.id != message.chat.id:
        return await message.answer("–ü—Ä–∏–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!\n\nüí† –ö–æ–º–∞–Ω–¥—ã:\n/start - –í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n/ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞.\n/checkin - –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ.\n/today - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n/tomorrow - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.",reply_markup=ReplyKeyboardRemove())
    if users.count_documents({"user":message.from_user.id}) == 0:
        return await message.answer("üí¢ –¢–µ–±–µ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –º–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é –∏ –Ω–∞–∂–º–∏—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ <b>–ù–∞—á–∞—Ç—å</b> –∏–ª–∏ /start")
    today = datetime.datetime.now().strftime("%d-%m-%Y")
    vote = ""
    if message.text == "üí† –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç":
        await message.reply("üí† –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å.\n–ü—Ä–∏–º–µ—Ä: –Ø –Ω–∞ –ø–µ—Ä–≤–æ–π –ø–∞—Ä–µ –Ω–µ –±—É–¥—É.\n\nüí¢ –£—á—Ç–∏, —á—Ç–æ –∫—É—Ä–∞—Ç–æ—Ä –≤—Å–µ –≤–∏–¥–∏—Ç, –Ω–µ –ø–∏—à–∏—Ç–µ –±—Ä–µ–¥.",reply_markup=ReplyKeyboardRemove())
        await state.set_state(AttachReason.reason)
        return
    elif message.text == "üí¢ –ú–µ–Ω—è –Ω–µ –±—É–¥–µ—Ç":
        vote = '-'
    elif message.text == "‚úÖ –Ø –ø—Ä–∏—à–µ–ª":
        vote = '+'
    status = add_attach(message.from_user.id,today,vote)
    if status:
        await message.reply(f"üí´ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ <b>{message.text}</b>")
    else:
        await message.reply(f"üí´ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")

@dp.message(AttachReason.reason)
async def AttachReason_handle(message:Message,state:FSMContext):
    await state.update_data(reason=message.text)
    data = await state.get_data()
    await state.clear()
    today = datetime.datetime.now().strftime("%d-%m-%Y")
    status = add_attach(message.from_user.id,today,data['reason'])
    if status:
        await message.reply(f"üí´ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ <b>{data['reason']}</b>",reply_markup=keyboard.main)
    else:
        await message.reply(f"üí´ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è.",reply_markup=keyboard.main)

@dp.message(F.text == 'üìÑ –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å')
async def handle_attendance(message:Message):
    if message.from_user.id != message.chat.id:
        return await message.answer("–ü—Ä–∏–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!\n\nüí† –ö–æ–º–∞–Ω–¥—ã:\n/start - –í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n/ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞.\n/checkin - –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ.\n/today - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n/tomorrow - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.",reply_markup=ReplyKeyboardRemove())
    if users.count_documents({"user":message.from_user.id}) == 0:
        return await message.answer("üí¢ –¢–µ–±–µ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –º–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é –∏ –Ω–∞–∂–º–∏—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ <b>–ù–∞—á–∞—Ç—å</b> –∏–ª–∏ /start")
    await message.answer("üí´ –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!",reply_markup=keyboard.attendance)

@dp.message(F.text.in_(["üåë –í—á–µ—Ä–∞", "‚òÄÔ∏è –°–µ–≥–æ–¥–Ω—è", "üåô –ó–∞–≤—Ç—Ä–∞"]))
async def handle_attendance_days(message:Message):
    if message.from_user.id != message.chat.id:
        return await message.answer("–ü—Ä–∏–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!\n\nüí† –ö–æ–º–∞–Ω–¥—ã:\n/start - –í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n/ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞.\n/checkin - –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ.\n/today - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n/tomorrow - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.",reply_markup=ReplyKeyboardRemove())
    if users.count_documents({"user":message.from_user.id}) == 0:
        return await message.answer("üí¢ –¢–µ–±–µ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –º–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é –∏ –Ω–∞–∂–º–∏—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ <b>–ù–∞—á–∞—Ç—å</b> –∏–ª–∏ /start")
    today = datetime.datetime.now()
    if message.text == "üåë –í—á–µ—Ä–∞": day = today - datetime.timedelta(days=1)
    elif message.text == "‚òÄÔ∏è –°–µ–≥–æ–¥–Ω—è": day = today
    elif message.text == "üåô –ó–∞–≤—Ç—Ä–∞": day = today + datetime.timedelta(days=1)
    text = f"üìä –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∑–∞ <b>{day.strftime('%d-%m-%Y')}</b>\n\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
    index = 0
    bad = 0
    steep = 0
    for student in users.find({}).sort('fullname', 1):
        index += 1
        if attendance.count_documents({'user':student['user'], 'date': day.strftime("%d-%m-%Y")}) == 0:
            bad += 1
            text += f"<u>[{index}]</u> <code>{student['fullname']}</code> | <b>- (–ù–µ –æ—Ç–º–µ—Ç–∏–ª—Å—è)</b>\n\n"
            continue
        mass = attendance.find_one({'user':student['user'], 'date': day.strftime("%d-%m-%Y")})
        if mass['reason'] == '-': bad += 1
        else: steep +=1
        text += f"<u>[{index}]</u> <code>{student['fullname']}</code> | <b>{mass['reason']}</b>\n\n"
    text += f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n‚ûñ –í—Å–µ–≥–æ –ø–ª–æ—Ö–∏—à–µ–π: <b>{bad}</b>\n‚ûï –í—Å–µ–≥–æ –∫—Ä—É—Ç—ã—à–µ–π: <b>{steep}</b>"
    await message.reply(text)

@dp.message(Command('ping'))
async def ping(message:Message) -> None:
    start = time.time()
    sent_message = await message.answer("‚åõ –°–µ–∫—É–Ω–¥–æ—á–∫—É...")
    end = time.time()
    await sent_message.edit_text(f"üí† –ü–∏–Ω–≥: {end - start} —Å–µ–∫—É–Ω–¥")

@dp.message(Command('checkin'))
async def checkin(message: Message) -> None:
    if message.from_user.id != message.chat.id and users.count_documents({"user":message.from_user.id}) == 0:
        return await message.answer("–ü—Ä–∏–≤–µ—Ç, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –º–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é –∏ –Ω–∞–∂–º–∏—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ <b>–ù–∞—á–∞—Ç—å</b> –∏–ª–∏ /start")
    args = message.text.split()[1:]
    reason = ' '.join(args)
    if reason == '':
        return await message.reply(f"üî¥ –í–≤–µ–¥–∏—Ç–µ /checkin [ <b>+</b> | <b>-</b> | <b>–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç</b> ]")
    today = datetime.datetime.now().strftime("%d-%m-%Y")
    status = add_attach(message.from_user.id,today,reason)
    if status:
        await message.reply(f"üí´ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ <b>{reason}</b>")
    else:
        await message.reply(f"üí´ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")

@dp.message(Command('today'))
async def today(message: Message) -> None:
    if users.count_documents({"user":message.from_user.id}) == 0:
        return await message.answer("üí¢ –¢–µ–±–µ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –º–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é –∏ –Ω–∞–∂–º–∏—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ <b>–ù–∞—á–∞—Ç—å</b> –∏–ª–∏ /start")
    last_message = await message.reply("‚åõ –û–±—Ä–∞–±–æ—Ç–∫–∞...")
    today = datetime.datetime.now()
    date1 = date2 = today.strftime("%d.%m.%Y")
    response = await get_schedule(last_message,date1,date2)
    if response == None: return
    await last_message.edit_text(text=response)

@dp.message(Command('tomorrow'))
async def today(message: Message) -> None:
    if users.count_documents({"user":message.from_user.id}) == 0:
        return await message.answer("üí¢ –¢–µ–±–µ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –º–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é –∏ –Ω–∞–∂–º–∏—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ <b>–ù–∞—á–∞—Ç—å</b> –∏–ª–∏ /start")
    last_message = await message.reply("‚åõ –û–±—Ä–∞–±–æ—Ç–∫–∞...")
    today = datetime.datetime.now()+datetime.timedelta(days=1)
    date1 = date2 = today.strftime("%d.%m.%Y")
    response = await get_schedule(last_message,date1,date2)
    if response == None: return
    await last_message.edit_text(text=response)

@dp.message(Command('stat'))
async def stat(message: Message) -> None:
    if not message.from_user.id == OWNER_ID: return
    db = "–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ!"
    try:
        cll.server_info()
        db = "–°—Ç–∞–±–∏–ª—å–Ω–æ."
    except: db = "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ."
    await message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è!\n\n–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {hbold(db)}")

@dp.message(Command('id'))
async def id_channel(message: Message) -> None:
    if not message.from_user.id == OWNER_ID: return
    await message.reply(f"üìä Chat ID: {message.chat.id}")

@dp.message(Command('all'))
async def all_mention(message: Message) -> None:
    author = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if not author.status in ['administrator', 'creator']: return await message.reply("üí¢ –û—à–∏–±–∫–∞, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É!")
    chat_members = []
    for member in users.find({}):
        chat_members.append(f"@{member['tag']}")
    
    await message.reply(f"üí¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\nüë• –£–ø–æ–º—è–Ω—É–ª: @{author.user.username}\n\n" + " ".join(chat_members) + f"üí† –í—Å–µ–≥–æ: <b>{len(chat_members)}</b>")

@dp.message(Command('qr'))
async def qr_send(message: Message) -> None:
    if not message.from_user.id == OWNER_ID: return
    qr = FSInputFile("/root/idisBot/image/QRCodeDisplay.png")
    if message.chat.id != OWNER_ID:
        await message.reply("üí´ –û—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    await bot.send_photo(chat_id=OWNER_ID, photo=qr)

async def task_loop():
    while True:
        try:
            today = datetime.datetime.now()
            schedule_array = IdisApi.get_last_schedule(today.strftime("%d.%m.%Y"),today.strftime("%d.%m.%Y"))
            if not schedule_array[0]:
                response = IdisApi.update_all()
                await bot.send_message(OWNER_ID,f"üí´ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!\n\n‚ùì–°—Ç–∞—Ç—É—Å: {response[0]}\n‚åõ –ü—Ä–æ—Ü–µ—Å—Å—ã:\n<pre><code class='language-json'>{json.dumps(response[1], indent=4, ensure_ascii=False)}</code></pre>")
                if not response[0]:
                    await bot.send_message(OWNER_ID,f"üí¢ –û—à–∏–±–∫–∞!\n{response[1]}")
            lesson = schedule_array[1][0]
            if not lesson['name'] == "–ù–µ—Ç—É –ø–∞—Ä":
                time_onepar = (str(lesson['time']).split(" "))[0]
                lesson_time = datetime.datetime.strptime(f"{today.strftime('%d.%m.%Y')} {time_onepar}", "%d.%m.%Y %H:%M")
                before_lesson = lesson_time - datetime.timedelta(minutes=5)
                last_befor_lesson = users.find_one({'user':OWNER_ID})['last_notif']
                links = []
                if (today >= before_lesson) and (last_befor_lesson != today.strftime("%d.%m.%Y")):
                    for student in users.find({}).sort('fullname', 1):
                        if attendance.count_documents({'user':student['user'], 'date': today.strftime("%d-%m-%Y")}) == 0:
                            links.append(f"@{student['tag']}")
                    text = f"üí¢ –û—Å—Ç–∞–ª–æ—Å—å 5 –º–∏–Ω—É—Ç –¥–æ –ø–∞—Ä—ã.\n\n{' '.join(links)}\n\n–í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è, —á—Ç–æ –±—ã –±—ã—Å—Ç—Ä–æ –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è:\n/checkin [ <b>+</b> | <b>-</b> | <b>–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç</b> ]"
                    await bot.send_message(CHANNEL_ID,text=text)
                    users.update_one({'user':OWNER_ID},{"$set":{'last_notif':today.strftime("%d.%m.%Y")}})
                for user in notification.find({"isOn": True}):
                    if not user["onSend"] == today.strftime("%d.%m.%Y"):
                        notification_time = lesson_time - datetime.timedelta(minutes=30*user["type"])
                        if today >= notification_time:
                            try:
                                last_update = datetime.datetime.strptime(schedule_array[2], "%d/%m/%Y, %H:%M:%S")
                                time_difference = today - last_update
                                minutes_ago = time_difference.total_seconds() // 60
                                if minutes_ago < 1: output = "–ú–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥."
                                elif minutes_ago == 1: output = "1 –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥."
                                else: output = f"{int(minutes_ago)} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥."
                                await bot.send_message(user['user'],f"‚òÄÔ∏è –°–æ–ª–Ω—ã—à–∫–æ –ø–æ—Ä–∞ –Ω–∞ –ø–∞—Ä—É!\n\nüí´ –î–∞—Ç–∞: {hbold(lesson['date']['week'])} - {hbold(lesson['date']['date'])}\nüîó {hbold(lesson['time'])} - {lesson['name']}\nüèôÔ∏è –ê–¥—Ä–µ—Å—Å: {hbold(lesson['place']['address'])}\nüö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {hbold(lesson['place']['audience'])}\nüßë‚Äçüè´ –ì—Ä—É–ø–ø—ã/–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {hbold(lesson['teacher'])}\n\n‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ: {hbold(output)}")
                                notification.update_one({"user": user['user']},{"$set": {"onSend": today.strftime("%d.%m.%Y")}})
                            except: continue
        except Exception as err:
            print(err)
        await asyncio.sleep(10)

async def main() -> None:
    asyncio.create_task(task_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())